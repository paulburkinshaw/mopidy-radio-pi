Implementing Radio Pi as a Mopidy Web server extension
******************************************************
The purpose of this doc is to provide a development log of the Radio Pi Mopidy Web server extension
Hopefully this will help other extension developers who want to do something similar

Step 1 - Research & project setup
--------------------------------
- Read through Extension development guide: https://docs.mopidy.com/en/latest/extensiondev/
- Looked at other Web Extensions: https://docs.mopidy.com/en/latest/ext/web/ 
- Installed cookiecutter project template generator on the pi https://github.com/mopidy/cookiecutter-mopidy-ext
	- ran the command cookiecutter https://github.com/mopidy/cookiecutter-mopidy-ext.git
		- filled in relevant info for each question such as dist_name and repo_name
- Created a Git repo from the generated project and uploaded to GitHub: https://github.com/paulburkinshaw/mopidy-radio-pi

Step 2 - Delving into the HTTP server side API  
----------------------------------------------
The Mopidy-HTTP extension comes with an HTTP server to host Mopidy’s HTTP JSON-RPC API (as of Mopidy 0.19). 
This web server can also be used by other extensions that need to expose something over HTTP

The HTTP server side API can be used to:
	- Host static files for e.g. a Mopidy client written in pure JavaScript
	- Host a Tornado application

Step 2.2 - Hosting a static file
--------------------------------
-  Registered an http:static dictionary in the extension registry
	- In ~\mopidy-radio-pi\mopidy_radio_pi\__init__.py setup
	- Set the path to ~\mopidy-radio-pi\mopidy_radio_pi\static\

Step 2.3 - Hosting a Tornado application
----------------------------------------
- Registered a dictionary under the http:app key in the extension registry
	- In ~\mopidy-radio-pi\mopidy_radio_pi\__init__.py setup
	- Set the factory to radio_pi_factory 
- Created a file called app.py in ~\mopidy-radio-pi\mopidy_radio_pi\
	- Created a function called radio_pi_factory that accepts two arguments - config and core

- 

Running extension while developing
-----------------------------------
Once your extension is ready to go, to see it in action you’ll need to register it with Mopidy. 
Typically this is done by running python setup.py install from your extension’s Git repo root directory. 
While developing your extension however you can instead run python setup.py develop to effectively link Mopidy directly with your development files.
This will create a file:-Mopidy-Radio-Pi.egg-link in /usr/local/lib/python2.7/dist-packages which links Mopidy to the files in home/pi/radio-pi-development_version/mopidy-radio-pi 

While being developed the solution files have been dropped into:
	- home/pi/radio-pi-development_version/mopidy-radio-pi 

in ssh navigate to the above path and run sudo python setup.py develop 
you will need to restart the Mopidy service for changes to take effect:- sudo service mopidy restart



issues encountered
------------------
*No sound issue*
I first thought this was because the mopidy user that mopidy runs under needed adding to the audio group
	- sudo usermod -a -G audio mopidy

But it was this (taken from: https://docs.mopidy.com/en/latest/installation/raspberrypi/) :

I have a HDMI cable connected, but want the sound on the analog sound connector, I have to run:
	- sudo amixer cset numid=3 1

to force it to use analog output. 1 means analog, 0 means auto, and is the default, while 2 means HDMI. You can test sound output independent of Mopidy by running:
	- aplay /usr/share/sounds/alsa/Front_Center.wav

*spotify extension not working*
This turned out to be because the version of the spotify extension was newer than mopidy, it needed mopidy version >= 1.0 and it was version 0.19 of mopidy that was installed, to fix i updated mopidy:-
	- sudo apt-get update
	- sudo apt-get dist-upgrade

*accessing internet using iPhone 5s internet but connect to mopidy web front end via LAN*
To enable this:
	- follow instructions here on how to tether raspberry pi to iPhone 5 http://www.vk3erw.com/index.php/16-software/23-raspberry-pi-tethered-to-iphone-5
	- then edit the interfaces file in /etc/network and set the eth0 interface to a static IP and the phones gateway IP as eth0 gateway to stop eth01 trying to use the default gateway assigned to it by DHCP
		iface eth0 inet static
		address 192.168.1.66 #may need to see what DHCP assigns first, then use that as a static IP if in the office to ensure you dont use an already assigned IP
		netmask 255.255.255.0
		gateway 172.20.20.1 #phones internet gateway IP



 







